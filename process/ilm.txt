#ilm-policy.conf
#create the ilm policy in Kibana interface chose a rollover policy based on age, size, etc...
##########################################################################USING LOGSTASH#####################################################################

#VAGRANT

output{
	elasticsearch{
		hosts => ["localhost:9200"]
		index => "cppdevices-${+YYYY.MM.dd}"
		ilm_rollover_alias => "myilm"
		ilm_pattern => "000001"
		ilm_policy => "ilm-policy"
		manage_template => true
		template => "/vagrant/mapping/cppdevicesmapping.json"
		template_name => "cppdevicesmapping"
	}
}

#DOCKER

output{
	elasticsearch{
		hosts => ["es01:9200","es02:9200","es03:9200"]
		index => "cppdevices-${+YYYY.MM.dd}"
		ilm_rollover_alias => "myilm"
		ilm_pattern => "000001"
		ilm_policy => "ilm-policy"
		manage_template => true
		template => "/usr/share/logstash/mapping/cppdevicesmapping.json"
		template_name => "cppdevicesmapping"
	}
}


#otherwise in elasticsearch I can create policies.sh and aliases.sh and template.sh



####################IN THE MAPPING##########################
curl -s XPUT 'http://localhost:9200/_template/javadevicesmapping' -H 'Content-Type: application/json' -d'
{
    "index_patterns": ["javadevices-* "],
    "template": "javadevicesmapping",
    "version": 1,
    "settings": {
    	"number_of_shards": 1,
    	"number_of_replicas": 1,
    	"index.lifecycle.name": "ilm-policy",
    	"index.lifecycle.rollover_alias": "javadevices"
    }
    "mappings": {
      "properties": {
        "@timestamp" : {
          "type": "date",
          "format": "strict_date_optional_time"
        },
        "host": {
          "properties": {
            "name": {
              "type": "keyword"
            }
          }
        },
        "message": {
          "type": "text"
        },
        "javadevices": {
          "properties": {
            "level": {
              "type": "keyword"
            },
            "timestamp": {
              "type": "date",
              "format":"strict_date_optional_time"
            },
            "devicename": {
              "type": "keyword"
            },
            "threadname": {
              "type": "keyword"
            },
            "method": {
              "type": "text"
            },
            "tasknumber": {
            "type": "long"
              },
            "message": {
              "type": "text"
            }
          }
        },
        "log": {
          "properties": {
            "file": {
              "properties": {
                "path": {
                  "type": "text"
                }
              }
            },
            "offset": {
              "type": "long"
            }
          }
        }
      }
    }
  }
 '
curl -s -XGET 'http://localhost:9200/_template/javadevicesmapping?pretty'


#############################in elasticsearch.yml##########################
node.name: node-1

node.attr.rack: r1

indices.lifecycle.poll_interval: 10m #check the state of indices every 10 minutes



##########################################################USING ELASTICSEARCH########################################################################

#############################in elasticsearch.yml##########################
node.name: node-1

node.attr.rack: r1

indices.lifecycle.poll_interval: 10m #check the state of indices every 10 minutes


cat policies.sh

#inside
curl -s XPUT 'http://localhost:9200/_ilm/policy/ilm-policy' -H 'Content-Type: application/json' -d'
{
	"policy": {
		"phases": {
			"hot": {
				"actions": {
					"rollover": {
						"max_age": "1d"
					}
				}
			}
			"delete": {
				"min_age": "1d",
				"actions": {
					"delete": {}
				}
			}
		}
	}
}
'
curl -s -XGET 'http://localhost:9200/_ilm/policy/ilm-policy?pretty'

chmod 775 policies.sh

#############This can be done on Elasticsearch Index Lifecycle policies tab, create policy in Kibana (Enable Rollover)

########################TEMPLATES#####################
vim template.sh

#inside
curl -s XPUT 'http://localhost:9200/_template/javadevicesmapping' -H 'Content-Type: application/json' -d'
{
    "index_patterns": ["soleil-* "],
    "template": "javadevicesmapping",
    "version": 1,
    "settings": {
    	"number_of_shards": 1,
    	"number_of_replicas": 1,
    	"index.lifecycle.name": "ilm-policy",
    	"index.lifecycle.rollover_alias": "soleil"
    },
    "mappings": {
      "properties": {
        "@timestamp" : {
          "type": "date",
          "format": "strict_date_optional_time"
        },
        "host": {
          "properties": {
            "name": {
              "type": "keyword"
            }
          }
        },
        "message": {
          "type": "text"
        },
        "javadevices": {
          "properties": {
            "level": {
              "type": "keyword"
            },
            "timestamp": {
              "type": "date",
              "format":"strict_date_optional_time"
            },
            "devicename": {
              "type": "keyword"
            },
            "threadname": {
              "type": "keyword"
            },
            "method": {
              "type": "text"
            },
            "tasknumber": {
            "type": "long"
              },
            "message": {
              "type": "text"
            }
          }
        },
        "log": {
          "properties": {
            "file": {
              "properties": {
                "path": {
                  "type": "text"
                }
              }
            },
            "offset": {
              "type": "long"
            }
          }
        }
      }
    }
  }
  '
curl -s -XGET 'http://localhost:9200/_template/javadevicesmapping?pretty'

chmod 775 template.sh

#######################ALIASES######################

vim aliases.sh

#inside
curl -s XPUT 'localhost:9200/%3Cjavadevices-%7Bnow%2Fd%7BYYYYMMdd%7D%7D-1%3E?pretty' -H 'Content-Type: application/json' -d'
{
	"aliases": {
		"javadevices": {
			"is_write_index": true
		}
	}
}
'
curl -s -XGET 'http://localhost:9200/_cat/indices?v'

chmod 775 aliases.sh



#################ILM FOR METRICBEAT#########################
Enable index lifecycle management by setting ilm.enabled: true in the Elasticsearch output configuration. For example:

output.elasticsearch:
  hosts: ["localhost:9200"]
  ilm.enabled: true

output.elasticsearch:
  hosts: ["localhost"]
  ilm.enabled: true
  ilm.rollover_alias: "metricbeat"
  ilm.pattern: "{now/d}-000001"

Load the default policy into Elasticsearch. You can either use the setup command to load the policy without modifying it, or modify the policy and load it manually.

To use the setup command, run:

metricbeat setup --ilm-policy

After loading the default policy, you can edit it in the Index lifecycle policies UI in Kibana. For more information about working with the UI.

To modify the default policy before loading it, run 
metricbeat export ilm-policy 
to print the policy to stdout. Modify the policy then use the Create lifecycle policy API to load it into Elasticsearch.

PUT _ilm/policy/<policy_id>

########################################
setup.ilm.enabled
Enables or disables index lifecycle management on any new indices created by Metricbeat. Valid values are true, false, and auto. 
When auto (the default) is specified on version 7.0 and later, Metricbeat automatically uses index lifecycle management 
if the feature is enabled in Elasticsearch and has the required license; otherwise, Metricbeat creates daily indices.

setup.ilm.rollover_alias
The index lifecycle write alias name. The default is metricbeat-%{[agent.version]}. Setting this option changes the alias name.

setup.ilm.pattern
The rollover index pattern. The default is %{now/d}-000001.

setup.ilm.policy_name
The name to use for the lifecycle policy. The default is metricbeat

setup.ilm.policy_file
The path to a JSON file that contains a lifecycle policy configuration. Use this setting to load your own lifecycle policy.

setup.ilm.check_exists
When set to false, disables the check for an existing lifecycle policy. The default is true. 
You need to disable this check if the Metricbeat user connecting to a secured cluster doesnâ€™t have the read_ilm privilege.

If you set this option to false, lifecycle policy will not be installed, even if setup.ilm.overwrite is set to true.

setup.ilm.overwrite
When set to true, the lifecycle policy is overwritten at startup. The default is false.

Example configuration:

setup.ilm.enabled: auto
setup.ilm.rollover_alias: "metricbeat"
setup.ilm.pattern: "{now/d}-000001"



######################################################
indices
An array of index selector rules. Each rule specifies the index to use for events that match the rule. During publishing, Metricbeat uses the first matching rule in the array. Rules can contain conditionals, format string-based fields, and name mappings. If the indices setting is missing or no rule matches, the index setting is used.

Similar to index, defining custom indices will disable Index lifecycle management (ILM).

Rule settings:

index
The index format string to use. If this string contains field references, such as %{[fields.name]}, the fields must exist, or the rule fails.
mappings
A dictionary that takes the value returned by index and maps it to a new name.
default
The default string value to use if mappings does not find a match.
when
A condition that must succeed in order to execute the current rule. All the conditions supported by processors are also supported here.
The following example sets the index based on whether the message field contains the specified string:

output.elasticsearch:
  hosts: ["http://localhost:9200"]
  indices:
    - index: "warning-%{[agent.version]}-%{+yyyy.MM.dd}"
      when.contains:
        message: "WARN"
    - index: "error-%{[agent.version]}-%{+yyyy.MM.dd}"
      when.contains:
        message: "ERR"
This configuration results in indices named warning-7.16.0-2021-12-08 and error-7.16.0-2021-12-08 (plus the default index if no matches are found).
