input {
    pipeline {
        address => javadevices
    }
}
filter {
    grok { 
        match => { 
            "message" => ['%{LOGLEVEL:[log][level]} +%{TIMESTAMP_ISO8601:[event][timestamp]} %{NOSPACE:[device][name]} \- %{GREEDYDATA:[process][thread][name]} \| %{LOGGER:[log][logger]}\.%{FUNCTION:[log][origin][function]}:%{INT:[log][origin][file][line]}%{BEFOREMESSAGE}%{GREEDYDATA:message}']
        }
        overwrite => [ "message" ]
        pattern_definitions => {
            "NOSPACE" => "\S*"
            "LOGGER" => "[^:]+"
            "FUNCTION" => "[^.:]+"
            "BEFOREMESSAGE" => "\n?\s*\-\s*"
        }
    }
    if [message] =~ /\n\tat/ {
        grok { 
            match => { 
                "message" => ['%{GREEDYDATA:message}\n?%{ERRORTYPE:[error][type]}: %{ERRORMESSAGE:[error][message]}\n%{ERRORSTACKTRACE:[error][stack_trace]}']
            }
            overwrite => [ "message" ]
            pattern_definitions => {
                "ERRORTYPE" => "[^-:]+"
                "ERRORMESSAGE" => "((?!\n\s+at).)*"
                "ERRORSTACKTRACE" => "\sat%{GREEDYDATA}"
            }
        }
    }
    date {
        match => [ "[event][timestamp]", "ISO8601" ]
        remove_field => [ "[event][timestamp]" ]
        timezone => "Europe/Paris"
    }
}
output {
    pipeline {
        send_to => collector
    }
}